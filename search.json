[
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive Your Project",
    "section": "",
    "text": "The project is now ready to be deposited for long-term archival. When considering an appropriate repository, there are a few questions to ponder (excerpt from Jackson & The Software Sustainability Institute, 2018, with footnotes removed, licensed under CC BY 4.0):\n\nDoes the digital repository give you a unique persistent digital identifier for your deposit?\nPersistent digital identifiers are identifiers that are provided under the assumption that they, and the digital objects they refer to, will remain available long term. Examples of unique persistent digital identifiers include DOIs and ARKs. The use of persistent digital identifiers for research outputs, including papers, data and software, and the use of these for citation purposes, is becoming prevalent in research.\nCan the digital repository accommodate the size of your deposit?\nDigital repositories may have constraints on the size of deposits they accept. For example, Zenodo has a limit of 50 GB and the University of Edinburgh DataShare has a limit of 20 GB for deposits done via a browser and 100 GB otherwise.\nHas your funder or publisher recommended or mandated a digital repository to use?\nIf both a funder and publisher mandate two different digital repositories you could deposit within them both, or discuss with each to see if they will agree for you to use one only, even if it is not the one they mandate.\nAre the policies of the digital repository acceptable to you?\nThese can include terms and conditions of use; availability of the service (e.g. does the service regularly go down for updates or does it run 24/7); how resilient the service is to breakdowns; where deposits are stored; how they are stored; what are the plans for stored deposits if the repository goes out of business; how secure the storage is; how regularly it is backed up; how long backups are kept for; and what disaster recovery plans are in place. Knowing the quality of service can help you judge whether your deposit will be available to others, and yourself, even in the face of disaster. It also allows you, and your institution, to develop contingency plans should such drastic circumstances arise.\nIs the longevity of the digital repository acceptable to you?\nYou want to know that the digital repository will host your deposit for as long as you need it too, not just 6 months or so. The policies or terms and conditions of the digital repository should state this. For example, Zenodo states that their lifetime is currently 20 years and figshare guarantees 10 years of persistent availability.\nIs the digital repository free or do you have to pay a fee? If there is a fee, is this a one-off payment and can you afford it?\nIf a digital repository expects a one-off payment, to subsidise its hosting, you may be able to pay for this out of your project budget or your institution may pay this for you. It is recommended that you avoid any digital repository that expects a regular fee for the duration for which they hold the deposit, since it would most likely be unsustainable for your institution to commit to ever-increasing fees over a long term. There are many free digital repositories available.\nIs the digital repository accredited or certified?\nThe digital repository may be accredited or certified by an independent agency that reviews digital repositories according to various criteria related to its policies and processes. The presence of an accreditation or certification may provide you with an additional degree of confidence that the digital repository meets your requirements. For example, the Data Seal of Approval can be awarded to digital repositories who satisfy a set of quality guidelines relating to how they manage, preserve and make available the deposits they hold. The presence of a Data Seal of Approval could give you additional confidence that a digital repository is suitable for holding your deposit.\n\nAdditional guidance is provided by d’Aquin et al. (2023), Garijo et al. (2022), and Science Europe (2021). You can use the registry of research data repositories re3data.org to find one that matches your criteria. We think that the Software Heritage code archive and Zenodo are good choices, but don’t forget to also check your local institutions for recommendations.",
    "crumbs": [
      "Home",
      "Archive Your Project"
    ]
  },
  {
    "objectID": "archive.html#where-to-deposit-software",
    "href": "archive.html#where-to-deposit-software",
    "title": "Archive Your Project",
    "section": "",
    "text": "The project is now ready to be deposited for long-term archival. When considering an appropriate repository, there are a few questions to ponder (excerpt from Jackson & The Software Sustainability Institute, 2018, with footnotes removed, licensed under CC BY 4.0):\n\nDoes the digital repository give you a unique persistent digital identifier for your deposit?\nPersistent digital identifiers are identifiers that are provided under the assumption that they, and the digital objects they refer to, will remain available long term. Examples of unique persistent digital identifiers include DOIs and ARKs. The use of persistent digital identifiers for research outputs, including papers, data and software, and the use of these for citation purposes, is becoming prevalent in research.\nCan the digital repository accommodate the size of your deposit?\nDigital repositories may have constraints on the size of deposits they accept. For example, Zenodo has a limit of 50 GB and the University of Edinburgh DataShare has a limit of 20 GB for deposits done via a browser and 100 GB otherwise.\nHas your funder or publisher recommended or mandated a digital repository to use?\nIf both a funder and publisher mandate two different digital repositories you could deposit within them both, or discuss with each to see if they will agree for you to use one only, even if it is not the one they mandate.\nAre the policies of the digital repository acceptable to you?\nThese can include terms and conditions of use; availability of the service (e.g. does the service regularly go down for updates or does it run 24/7); how resilient the service is to breakdowns; where deposits are stored; how they are stored; what are the plans for stored deposits if the repository goes out of business; how secure the storage is; how regularly it is backed up; how long backups are kept for; and what disaster recovery plans are in place. Knowing the quality of service can help you judge whether your deposit will be available to others, and yourself, even in the face of disaster. It also allows you, and your institution, to develop contingency plans should such drastic circumstances arise.\nIs the longevity of the digital repository acceptable to you?\nYou want to know that the digital repository will host your deposit for as long as you need it too, not just 6 months or so. The policies or terms and conditions of the digital repository should state this. For example, Zenodo states that their lifetime is currently 20 years and figshare guarantees 10 years of persistent availability.\nIs the digital repository free or do you have to pay a fee? If there is a fee, is this a one-off payment and can you afford it?\nIf a digital repository expects a one-off payment, to subsidise its hosting, you may be able to pay for this out of your project budget or your institution may pay this for you. It is recommended that you avoid any digital repository that expects a regular fee for the duration for which they hold the deposit, since it would most likely be unsustainable for your institution to commit to ever-increasing fees over a long term. There are many free digital repositories available.\nIs the digital repository accredited or certified?\nThe digital repository may be accredited or certified by an independent agency that reviews digital repositories according to various criteria related to its policies and processes. The presence of an accreditation or certification may provide you with an additional degree of confidence that the digital repository meets your requirements. For example, the Data Seal of Approval can be awarded to digital repositories who satisfy a set of quality guidelines relating to how they manage, preserve and make available the deposits they hold. The presence of a Data Seal of Approval could give you additional confidence that a digital repository is suitable for holding your deposit.\n\nAdditional guidance is provided by d’Aquin et al. (2023), Garijo et al. (2022), and Science Europe (2021). You can use the registry of research data repositories re3data.org to find one that matches your criteria. We think that the Software Heritage code archive and Zenodo are good choices, but don’t forget to also check your local institutions for recommendations.",
    "crumbs": [
      "Home",
      "Archive Your Project"
    ]
  },
  {
    "objectID": "archive.html#using-zenodo-to-archive-your-project",
    "href": "archive.html#using-zenodo-to-archive-your-project",
    "title": "Archive Your Project",
    "section": "Using Zenodo to Archive Your Project",
    "text": "Using Zenodo to Archive Your Project\nIn the following we will demonstrate how to use Zenodo to archive one’s project and obtain a DOI.\n\n\n\n\n\n\nCaution 1: Zenodo Sandbox\n\n\n\nNote that during this tutorial, we will be using Zenodo’s sandbox instance located at sandbox.zenodo.org in order to learn how to use it while not wasting Zenodo’s resources. For real projects, use the production instance at zenodo.org, which requires a separate account.\n\n\nFirst, create an account on the Zenodo Sandbox by clicking on Sign up in the upper right corner and submitting the provided form. Then, confirm your email address (also check your spam folder if you cannot find the confirmation email).\nNow you can follow the guide “Create new upload”, taking into account the following notes specific to each step:\n\nAdd/remove files: To circumvent the file limit on Zenodo, you can bundle your project folder in one ZIP file and upload that instead.\nFill in metadata\n\nDigital Object Identifier (DOI): Usually, you will want a DOI, therefore you need to choose No for the question whether you already have a DOI for this upload, and click on Get a DOI now!.\nResource type: Select the most appropriate one, for example, Publication / Preprint.\nLicenses: If your project only contains content by you and if you previously only chose one license, you can select that by choosing Add standard. Otherwise, click on Add custom and describe how each file is licensed. If you have been using REUSE to record license information, you can run enter SPDX Document as title and run the reuse tool with reuse spdx -o reuse.spdx to create the file reuse.spdx. Then you can paste the content of reuse.spdx into the description field of the custom license as it contains information about the license of each file.\n\n\nIf you previously uploaded your project to a public Git repository (which we didn’t cover during this tutorial), you could also add the new DOI to your README, for example, under the section “Citation”.",
    "crumbs": [
      "Home",
      "Archive Your Project"
    ]
  },
  {
    "objectID": "archive.html#final-remarks",
    "href": "archive.html#final-remarks",
    "title": "Archive Your Project",
    "section": "Final Remarks",
    "text": "Final Remarks\nThere are situations in which you are not allowed to share your data publicly. In this case, consider using a repository specifically for research data, which later grants access for valid uses individually.\nFor further information, you may be interested in Software Deposit Guidance for Researchers.",
    "crumbs": [
      "Home",
      "Archive Your Project"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Project Setup",
    "section": "",
    "text": "We will start by setting up a simple example of a reproducible report.",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#create-quarto-project",
    "href": "setup.html#create-quarto-project",
    "title": "Project Setup",
    "section": "Create Quarto Project",
    "text": "Create Quarto Project\nFirst, we will need to create a new Quarto project.\nIf you haven’t already, open RStudio – see Note 1 for how to use the terminal instead. Then, click on File &gt; New Project… to open the New Project Wizard.\n\n\n\n\n\nHere, select New Directory\n\n\n\n\n\nAnd choose the project type Quarto Project.\n\n\n\n\n\nFinally, enter the name of the directory where our report will be created in, for example code-publishing-exercise.\nAs we will use Git to track the version history of files, be sure to check Create a git repository. If you don’t know what Git is, have a look at the tutorial “Introduction to version control with git and GitHub within RStudio”.\n\n\n\n\n\nrenv: A dependency management toolkit for R\n\n\nAlso, we will utilize the package renv to track the R packages our project depends on. Using it makes it easier for others to view and obtain them at a later point in time. Therefore make sure that the box Use renv with this project is checked. Again, if this is the first time you are hearing about renv, have a look at the tutorial “Introduction to {renv}”.\nIf you are already familiar with Markdown and Quarto, you can uncheck the box Use visual markdown editor.\n\n\n\n\n\nClick on Create Project. Your RStudio window should now look similar to this:\n\n\n\n\n\nIf, like in the image, a Quarto file with some demo content was opened automatically, you can close and delete it, for example, using RStudio’s file manager.\nMake sure that your project is in a consistent state according to renv by running:\n\n\nConsole\n\nrenv::status()\n\nIf it reports packages that are not used, synchronize the lock file using:\n\n\nConsole\n\nrenv::snapshot()\n\n\n\n\n\n\n\nNote 1: Without RStudio\n\n\n\n\n\nWithout RStudio, one can create a Quarto project with version control and renv enabled by typing the following into a terminal:\n\n\nTerminal\n\nquarto create project default code-publishing-exercise\ncd code-publishing-exercise/\nrm code-publishing-exercise.qmd\ngit init\ngit checkout -b main\n\nThen, one can open an R session, by simply typing R into the terminal. Next, make sure that getwd() indicates that the working directory is code-publishing-exercise. If not, set it using setwd(\"code-publishing-exercise\"). Then, initialize renv:\n\n\nConsole\n\nrenv::init()\n\n\n\n\nYou are now ready to stage and commit your files. You can either stage files separately or the whole project folder at once. If you do the latter, we recommend you to inspect the untracked changes before staging all of them:\n\n\nIn file paths, a period (.) means “the current directory”, while two periods (..) mean “the parent directory”. Therefore git add . means “stage the current directory for committing”.\n\n\nTerminal\n\ngit status\n\nSince no commits have been made so far, this should include every file that is not covered by the .gitignore file. If everything can be staged for committing – as is the case in this tutorial – you can follow up with:\n\n\nTerminal\n\ngit add .\ngit commit -m \"Initial commit\"\n\nIf you see a file you’d rather not commit, delete it or add its name to the .gitignore file. If you don’t check your changes before committing, you might accidentally commit something you’d rather not.\n\n\n\n\n\n\nTip 1\n\n\n\nIf git commit fails with the message Author identity unknown, you need to tell Git who you are. Run the following commands to set your name and email address:\n\n\nTerminal\n\ngit config user.name \"YOUR NAME\"\ngit config user.email \"YOUR EMAIL ADDRESS\"\n\nThen, commit again.",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#decide-on-structure",
    "href": "setup.html#decide-on-structure",
    "title": "Project Setup",
    "section": "Decide on Structure",
    "text": "Decide on Structure\nBefore adding your project files, it is helpful to decide on a directory structure, that is, how to call each file and where to put it. In general, the directory structure should facilitate understanding a project by breaking it into logical chunks. There is no single best solution, as a good structure depends on where a project’s complexity lies. However, it is usually helpful if the different files and folders reflect the execution order. For example, if there are multiple data processing stages, one can possibly differentiate input (raw data), intermediate (processed data), and output files (e.g., figures) and put them into separate folders. Similarly, the corresponding code files (e.g., preparation, modeling, visualization) can be prefixed with increasing numbers.\nLuckily, there are already numerous proposals for how to organize one’s project files, both general (Project TIER, 2021; e.g., Wilson et al., 2017) as well as specific to a particular programming language (e.g., Marwick et al., 2018; Vuorre & Crump, 2021) or journal (Vilhuber, 2021). We recommend you to follow the standards of your field.\nFor the purpose of this tutorial, we will provide you with a data set and a corresponding analysis. They are simple enough to be put together in the root folder of your project.",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#add-data",
    "href": "setup.html#add-data",
    "title": "Project Setup",
    "section": "Add Data",
    "text": "Add Data\nYou can now download the data set we have prepared for you and put into your project folder: Data.csv\n\n\n\n\n\npalmerpenguins: Palmer Archipelago (Antarctica) Penguin Data\n\n\nThe data set is from the package palmerpenguins and contains the recorded bill lengths and sex of penguins living on three islands in the Palmer Archipelago, Antarctica. It was made available under the license CC0 1.0.\n\n\n\n\n\n\nWarning 1: Consider Legal Restrictions Before Sharing\n\n\n\nEverything you put into the project folder will be shared publicly. For reasons of reproducibility, this should include the data you analyze. Of course, you should only share them to the extent you are allowed to, taking into account:\n\napplicable privacy laws (e.g., the GDPR for European citizens),\ncontractual obligations (e.g., with your data provider),\ncopyright of the data and their particular structure, and\nany sui generis database right.\n\nPrivacy laws and contractual obligations may require you to create a completely anonymized or synthetic dataset1 (if possible), or prohibit any sharing of data, in which case you should provide a reference to a data repository where they can be obtained from. For further information, you can watch the talk “Data anonymity” by Felix Schönbrodt recorded during the LMU Open Science Center Summer School 2023 and have a look at the accompanying slides.\nPurely factual data such as measurements are usually not copyrightable, but literary or artistic works that cross the threshold of originality are. Additionally, in some jurisdictions data can be subject to sui generis database rights which prevent extracting substantial parts of a database. As a consequence, you need to ensure that you own or have authority to share the data with respect to copyright and similar rights, and to license it to others (see “Choose a License”).\n\n\nWhen publishing a data set, it is important to document the meaning (e.g., units) and possible values of its variables. This is typically done with a data dictionary (also called a codebook). In the following, we will demonstrate how to create a simple data dictionary using the R packages tinylabels, datawizard, and tinytable. You can install them now using:\n\n\nConsole\n\nrenv::install(c(\n  \"tinylabels\",\n  \"datawizard\",\n  \"tinytable\"\n))\n\nYou can put the code that follows for creating the data dictionary into a new file called create_data_dictionary.R.\nUsing tinylabels we can add labels to the variables of a data.frame in R:2\n\n\n\ncreate_data_dictionary.R\n\n## dat &lt;- read.csv(\"Data.csv\")\n\ndescriptions &lt;- c(\n  species = \"a character string denoting penguin species\",\n  island = \"a character string denoting island in Palmer Archipelago, Antarctica\",\n  bill_length_mm = \"a number denoting bill length (millimeters)\",\n  bill_depth_mm = \"a number denoting bill depth (millimeters)\",\n  flipper_length_mm = \"an integer denoting flipper length (millimeters)\",\n  body_mass_g = \"an integer denoting body mass (grams)\",\n  sex = \"a character string denoting penguin sex\",\n  year = \"an integer denoting the study year\"\n)\ntinylabels::variable_label(dat) &lt;- descriptions\n\n\nSubsequently, datawizard can be employed to create the data dictionary containing the name and label, but also some other information about each variable:\n\n\n\n\n\ndatawizard: Easy Data Wrangling and Statistical Transformations\n\n\n\n\n\ncreate_data_dictionary.R\n\n(dict &lt;- datawizard::data_codebook(dat) |&gt;\n  subset(select = -.row_id) |&gt;\n  tinytable::tt())\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                ID\n                Name\n                Label\n                Type\n                Missings\n                Values\n                N\n                Prop\n              \n        \n        \n        \n                \n                  1\n                  species          \n                  a character string denoting penguin species                         \n                  character\n                  0 (0.0%) \n                  Adelie      \n                  152\n                  44.2%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                  Chinstrap   \n                  68 \n                  19.8%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                  Gentoo      \n                  124\n                  36.0%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                              \n                     \n                       \n                \n                \n                  2\n                  island           \n                  a character string denoting island in Palmer Archipelago, Antarctica\n                  character\n                  0 (0.0%) \n                  Biscoe      \n                  168\n                  48.8%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                  Dream       \n                  124\n                  36.0%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                  Torgersen   \n                  52 \n                  15.1%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                              \n                     \n                       \n                \n                \n                  3\n                  bill_length_mm   \n                  a number denoting bill length (millimeters)                         \n                  numeric  \n                  2 (0.6%) \n                  [32.1, 59.6]\n                  342\n                       \n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                              \n                     \n                       \n                \n                \n                  4\n                  bill_depth_mm    \n                  a number denoting bill depth (millimeters)                          \n                  numeric  \n                  2 (0.6%) \n                  [13.1, 21.5]\n                  342\n                       \n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                              \n                     \n                       \n                \n                \n                  5\n                  flipper_length_mm\n                  an integer denoting flipper length (millimeters)                    \n                  integer  \n                  2 (0.6%) \n                  [172, 231]  \n                  342\n                       \n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                              \n                     \n                       \n                \n                \n                  6\n                  body_mass_g      \n                  an integer denoting body mass (grams)                               \n                  integer  \n                  2 (0.6%) \n                  [2700, 6300]\n                  342\n                       \n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                              \n                     \n                       \n                \n                \n                  7\n                  sex              \n                  a character string denoting penguin sex                             \n                  character\n                  11 (3.2%)\n                  female      \n                  165\n                  49.5%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                  male        \n                  168\n                  50.5%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                              \n                     \n                       \n                \n                \n                  8\n                  year             \n                  an integer denoting the study year                                  \n                  integer  \n                  0 (0.0%) \n                  2007        \n                  110\n                  32.0%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                  2008        \n                  114\n                  33.1%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                  2009        \n                  120\n                  34.9%\n                \n                \n                   \n                                   \n                                                                                      \n                           \n                           \n                              \n                     \n                       \n                \n        \n      \n    \n\n\n\nFinally, we can store the data dictionary inside an HTML file using the R package tinytable and put the HTML file into the project folder as well.\n\n\n\n\n\ntinytable: Simple and Configurable Tables\n\n\n\n\ncreate_data_dictionary.R\n\ntinytable::save_tt(dict, output = \"data_dictionary.html\")\n\nA human-readable data dictionary is necessary for making one’s research reproducible and the example we provided demonstrates only the bare minimum. A full data documentation including measurement instruments, sampling procedures, appropriate weighting, contact information, and more information about the study can be created with the R package pointblank. And one could go even further by making the information machine-readable in a standardized way. We provide an optional example of that in Note 2. If you want to learn more about the sharing of research data, have a look at the tutorial “FAIR research data management”.\n\n\n\n\n\n\nNote 2: Create Machine-Readable Variable Documentation\n\n\n\n\n\nThis example demonstrates how the title and description of the data set, the description of the variables and their possible values are stored in a machine-readable way.\ntable_info &lt;- c(\n  title = \"penguins dataset\",\n  description = \"Size measurements for adult foraging penguins near Palmer Station, Antarctica\"\n)\ndescriptions &lt;- c(\n  species = \"a character string denoting penguin species\",\n  island = \"a character string denoting island in Palmer Archipelago, Antarctica\",\n  bill_length_mm = \"a number denoting bill length (millimeters)\",\n  bill_depth_mm = \"a number denoting bill depth (millimeters)\",\n  flipper_length_mm = \"an integer denoting flipper length (millimeters)\",\n  body_mass_g = \"an integer denoting body mass (grams)\",\n  sex = \"a character string denoting penguin sex\",\n  year = \"an integer denoting the study year\"\n)\nvals &lt;- list(\n  species = c(\"Adelie\", \"Gentoo\", \"Chinstrap\"),\n  island = c(\"Torgersen\", \"Biscoe\", \"Dream\"),\n  sex = c(\"male\", \"female\"),\n  year = c(2007, 2008, 2009)\n)\nGenerally, metadata are either stored embedded into the data or externally, for example, in a separate file. We will use the “frictionless data” standard, where metadata are stored separately. Another alternative would be RO-Crate.\nSpecifically, one can use the R package frictionless to create a schema which describes the structure of the data.3 For the purpose of the following code, it is just a nested list that we edit to include our own information. We also explicitly record in the schema that missing values are stored in the data file as NA and that the data are licensed under CC0 1.0. Finally, the package is used to create a metadata file that contains the schema.\n# Read data and create schema\ndat_filename &lt;- \"Data.csv\"\ndat &lt;- read.csv(dat_filename)\ndat_schema &lt;- frictionless::create_schema(dat)\n\n# Add descriptions to the fields\ndat_schema$fields &lt;- lapply(dat_schema$fields, \\(x) {\n  c(x, description = descriptions[[x$name]])\n})\n\n# Record possible values\ndat_schema$fields &lt;- lapply(dat_schema$fields, \\(x) {\n  if (x$name %in% names(vals)) {\n    modifyList(x, list(constraints = list(enum = vals[[x$name]])))\n  } else {\n    x\n  }\n})\n\n# Define missing values\ndat_schema$missingValues &lt;- c(\"\", \"NA\")\n\n# Create package with license info and write it\ndat_package &lt;- frictionless::create_package() |&gt;\n  frictionless::add_resource(\n    resource_name = \"penguins\",\n    data = dat_filename,\n    schema = dat_schema,\n    title = table_info[[\"title\"]],\n    description = table_info[[\"description\"]],\n    licenses = list(list(\n      name = \"CC0-1.0\",\n      path = \"https://creativecommons.org/publicdomain/zero/1.0/\",\n      title = \"CC0 1.0 Universal\"\n    ))\n  )\nfrictionless::write_package(dat_package, directory = \".\")\nThis creates the metadata file datapackage.json in the current directory. Make sure it is located in the same folder as Data.csv, as together they comprise a data package.\n\n\n\nHaving added the data and its documentation, one can view and record the utilized packages with renv…\n\n\nConsole\n\nrenv::status()\nrenv::snapshot()\n\n…and go through the commit routine:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add data\"",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#add-code",
    "href": "setup.html#add-code",
    "title": "Project Setup",
    "section": "Add Code",
    "text": "Add Code\nIn order to have some code which you can practice to share, we have prepared a simple manuscript for you, alongside a bibliography file. The manuscript contains code together with a written narrative. Download the two files to your computer and put them into your project folder.\n\nManuscript.qmd\nBibliography.bib\n\nThe manuscript explores differences in bill length between male and female penguins, feel free to read through it.\n\n\n\n\n\n\nWarning 2: Take Copyright Seriously\n\n\n\nWhen you include work by others in your project – especially if you intend to make it available publicly –, make sure you have the necessary rights to do so. Only build on existing work for which you are given an express grant of relevant rights. How do you know you are allowed to copy, edit, and share the two files linked above?\n\n\n\n\n\n\n\n\nNote 3: Hint for “Take Copyright Seriously”\n\n\n\n\n\nHave a look at the about page.\n\n\n\nAs the manuscript uses some new packages, install them with:\n\n\nConsole\n\nrenv::install()\n\nThe manuscript also uses the Quarto extension “apaquarto”, which typesets documents according to the requirements of the American Psychological Association (2020). It can be installed in the project using the following command:\n\n\nTerminal\n\nquarto add --no-prompt wjschne/apaquarto\n\n\n\n\n\n\n\nTip 2: Not a psychologist?\n\n\n\nIf you are not a psychologist, you can also skip installing apaquarto. If you installed it by accident, run quarto remove wjschne/apaquarto.\nNote, however, that the file Manuscript.qmd we prepared for you uses apaquarto by default and you need to set a different format in the YAML header if you decide not to use apaquarto:\n\n\nManuscript.qmd\n\nformat:\n  pdf:\n    pdf-engine: lualatex\n    documentclass: scrartcl\n    papersize: a4\n\n\n\nAlso, you need to have a \\(\\TeX\\) distribution installed on your computer, which is used in the background to typeset PDF documents. A lightweight choice is TinyTeX, which can be installed with Quarto as follows:\n\n\nTerminal\n\nquarto install tinytex\n\nYou should now be able to render the document using Quarto:\n\n\nTerminal\n\nquarto render Manuscript.qmd\n\nThis should create a PDF file called Manuscript.pdf in your project folder.\n\n\n\n\n\n\nTip 3\n\n\n\nIf the PDF file cannot be created, try updating Quarto. It comes bundled with RStudio, however apaquarto sometimes requires more recent versions.\n\n\nWith the code being added, one can use renv again to view and record the new packages:\n\n\nConsole\n\nrenv::status()\nrenv::snapshot()\n\n\n\n\n\n\n\nTip 4\n\n\n\nAlways run renv::status() and resolve any inconsistencies before you commit code to your project. This way, every commit represents a working state of your project.\n\n\nFinally, make your changes known to Git:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add manuscript\"\n\n\n\n\n\n\n\nWarning 3: Beware of Credentials\n\n\n\nSometimes, a data analysis requires the interaction with online services:\n\nData may be collected from social network sites using their APIs4 or downloaded from a data repository, or\nan analysis may be conducted with the help of AI providers.\n\nIn these cases, make sure that the code you check in to Git does not contain any credentials that are required for accessing these services. Instead, make use of environment variables which are defined in a location that is excluded from version control. When programming with R, you can define them in a file called .Renviron in the root of your project folder:\n\n\n.Renviron\n\nMY_FIRST_KEY=\"your_api_key_here\"\nMY_SECOND_KEY=\"your_api_key_here\"\n\nWhen you start a new session from the project root, the file is automatically read by R and the environment variables can be accessed using Sys.getenv():\nquery_api(..., api_key = Sys.getenv(\"MY_FIRST_KEY\"))\nMake sure that .Renviron is added to your .gitignore file in order to exclude it from the Git repository. If you already committed a file that contains credentials, you can follow Chacon & Straub (2024).\n\n\n\nCoding Best Practices\nAlthough we provide the code in this example for you, a few things remain to be said about best practices when it comes to writing code that is readable and maintainable.\n\nUse project-relative paths. When you refer to a file within your project, write paths relative to your project root. For example, don’t write C:/Users/Public/Documents/my_project/images/result.png, instead write images/result.png.\nKeep it simple. Add complexity only when you must. Whenever there’s a boring way to do something and a clever way, go for the boring way. If the code grows increasingly complex, refactor it into separate functions and files.\nDon’t repeat yourself. Use variables and functions before you start to write (or copy-paste) the same thing twice.\nUse comments to explain why you do things. The code already shows what you do. Use comments to summarize it and explain why you do it.\nDon’t reinvent the wheel. With R, chances are that what you need to do is greatly facilitated by a package from one of many high-quality collections such as rOpenSci, r-lib, Tidyverse, or fastverse.\nThink twice about your dependencies. Every dependency increases the risk of irreproducibility in the future. Prefer packages that are well-maintained and light on dependencies5. We also recommend you to read “When should you take a dependency?” by Wickham & Bryan (2023).\nFail early, often and noisily. Whenever you expect a certain state, use assertions to be sure. In R, you can use stopifnot() to make sure that a condition is actually true.\nTest your code. Test your code with scenarios where you know what the result should be. Turn bugs you discovered into test cases. Use linting tools6 to identify common mistakes in your code, for example, the R package lintr.\nRead through a style guide and follow it. A style guide is a set of stylistic conventions that improve the code quality. R users are recommended to read Wickham’s (2022) “Tidyverse style guide” and use the R package styler. Python users may benefit from reading the “Style Guide for Python Code” by Rossum et al. (2013). And even if you don’t follow a style guide, be consistent.\n\nThis is only a brief summary and there is much more to be learned about coding practices. If you want to dive deeper we recommend the following resources:\n\n“Tidy design principles” (Wickham, 2023)\n“The Good Research Code Handbook” (Mineault & Nozawa, 2021)\n“Quality assurance of code for analysis and research” (UK Government Analytical Community, 2020)\n“The Art of UNIX Programming” (Raymond, 2003)\n\n\n“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”\n— Martin Fowler, British software engineer",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#the-last-mile",
    "href": "setup.html#the-last-mile",
    "title": "Project Setup",
    "section": "The Last Mile",
    "text": "The Last Mile\nrenv only records the versions of R packages and of R itself. This means that potential system dependencies of R packages and other tools utilized in the project are not documented anywhere, including Quarto.7 We will manually write them down when creating a README. For now, however, there is one simple step you can take to record the version of Quarto (and a few other dependencies). Do run the following:\n\n\nTerminal\n\nquarto use binder\n\nThis will create a few additional files which facilitate reconstructing the computational environment in the future.8 As always, commit your changes:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add repo2docker config\"\n\nYou are now all set up to prepare your project for sharing!",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#footnotes",
    "href": "setup.html#footnotes",
    "title": "Project Setup",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor example, using Amnesia, ARX, sdcMicro, or Synthpop.↩︎\nNote that the code provided does not alter the data file – no labels will be added to Data.csv. The labels are only added to a (temporary) copy of the data set within R in order to create the data dictionary.↩︎\nIn June 2024, version 2 of the frictionless data standard has been released. As of November 2024, the R package frictionless only supports the first version, though support for v2 is planned.↩︎\nAn application programming interface provides the capability to interact with other software using a programming language.↩︎\nYou can use the function pak::pkg_deps() to count the total number of package dependencies in R.↩︎\nA linting tool analyzes your code without actually running it. This process is called static code analysis.↩︎\nAs of August 2024, a proposal to record the version of Quarto has not been implemented, see rstudio/renv#1143.↩︎\nEither using repo2docker or the public binder service.↩︎",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This work was completed with the following R packages: datawizard v. 0.12.3 (Patil et al., 2022), grateful v. 0.2.4 (Francisco Rodriguez-Sanchez & Connor P. Jackson, 2023), knitr v. 1.48 (Xie, 2014, 2015, 2024), quarto v. 1.4.4 (Allaire & Dervieux, 2024), renv v. 1.0.7 (Ushey & Wickham, 2024), report v. 0.5.9 (Makowski et al., 2023), rmarkdown v. 2.28 (Allaire et al., 2024; Xie et al., 2018, 2020), sessioninfo v. 1.2.2 (Wickham et al., 2021), tidyverse v. 2.0.0 (Wickham et al., 2019), tinylabels v. 0.2.4 (Barth, 2023), tinytable v. 0.4.0 (Arel-Bundock, 2024), withr v. 3.0.1 (Hester et al., 2024).\n\n\nQuarto: 1.6.39\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  C.UTF-8\n ctype    C.UTF-8\n tz       UTC\n date     2024-11-27\n pandoc   3.4 @ /opt/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P cli           3.6.3   2024-06-21 [?] RSPM (R 4.4.0)\n P digest        0.6.37  2024-08-19 [?] RSPM (R 4.4.0)\n P evaluate      0.24.0  2024-06-10 [?] RSPM (R 4.4.0)\n P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.4.0)\n P grateful      0.2.4   2023-10-22 [?] RSPM (R 4.4.0)\n P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.4.0)\n P jsonlite      1.8.8   2023-12-04 [?] RSPM (R 4.4.0)\n P knitr         1.48    2024-07-07 [?] RSPM (R 4.4.0)\n P later         1.3.2   2023-12-06 [?] RSPM (R 4.4.0)\n P processx      3.8.4   2024-03-16 [?] RSPM (R 4.4.0)\n P ps            1.7.7   2024-07-02 [?] RSPM (R 4.4.0)\n P quarto        1.4.4   2024-07-20 [?] RSPM (R 4.4.0)\n P Rcpp          1.0.13  2024-07-17 [?] RSPM (R 4.4.0)\n   renv          1.0.7   2024-04-11 [1] RSPM (R 4.4.1)\n P rlang         1.1.4   2024-06-04 [?] RSPM (R 4.4.0)\n P rmarkdown     2.28    2024-08-17 [?] RSPM (R 4.4.0)\n P rstudioapi    0.16.0  2024-03-24 [?] RSPM (R 4.4.0)\n P sessioninfo   1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n P withr         3.0.1   2024-07-31 [?] RSPM (R 4.4.0)\n P xfun          0.47    2024-08-17 [?] RSPM (R 4.4.0)\n P yaml          2.3.10  2024-07-26 [?] RSPM (R 4.4.0)\n\n [1] /home/runner/work/code-publishing/code-publishing/renv/library/linux-ubuntu-jammy/R-4.4/x86_64-pc-linux-gnu\n [2] /home/runner/.cache/R/renv/sandbox/linux-ubuntu-jammy/R-4.4/x86_64-pc-linux-gnu/22bdb599\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "about.html#utilized-software",
    "href": "about.html#utilized-software",
    "title": "About",
    "section": "",
    "text": "This work was completed with the following R packages: datawizard v. 0.12.3 (Patil et al., 2022), grateful v. 0.2.4 (Francisco Rodriguez-Sanchez & Connor P. Jackson, 2023), knitr v. 1.48 (Xie, 2014, 2015, 2024), quarto v. 1.4.4 (Allaire & Dervieux, 2024), renv v. 1.0.7 (Ushey & Wickham, 2024), report v. 0.5.9 (Makowski et al., 2023), rmarkdown v. 2.28 (Allaire et al., 2024; Xie et al., 2018, 2020), sessioninfo v. 1.2.2 (Wickham et al., 2021), tidyverse v. 2.0.0 (Wickham et al., 2019), tinylabels v. 0.2.4 (Barth, 2023), tinytable v. 0.4.0 (Arel-Bundock, 2024), withr v. 3.0.1 (Hester et al., 2024).\n\n\nQuarto: 1.6.39\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  C.UTF-8\n ctype    C.UTF-8\n tz       UTC\n date     2024-11-27\n pandoc   3.4 @ /opt/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P cli           3.6.3   2024-06-21 [?] RSPM (R 4.4.0)\n P digest        0.6.37  2024-08-19 [?] RSPM (R 4.4.0)\n P evaluate      0.24.0  2024-06-10 [?] RSPM (R 4.4.0)\n P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.4.0)\n P grateful      0.2.4   2023-10-22 [?] RSPM (R 4.4.0)\n P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.4.0)\n P jsonlite      1.8.8   2023-12-04 [?] RSPM (R 4.4.0)\n P knitr         1.48    2024-07-07 [?] RSPM (R 4.4.0)\n P later         1.3.2   2023-12-06 [?] RSPM (R 4.4.0)\n P processx      3.8.4   2024-03-16 [?] RSPM (R 4.4.0)\n P ps            1.7.7   2024-07-02 [?] RSPM (R 4.4.0)\n P quarto        1.4.4   2024-07-20 [?] RSPM (R 4.4.0)\n P Rcpp          1.0.13  2024-07-17 [?] RSPM (R 4.4.0)\n   renv          1.0.7   2024-04-11 [1] RSPM (R 4.4.1)\n P rlang         1.1.4   2024-06-04 [?] RSPM (R 4.4.0)\n P rmarkdown     2.28    2024-08-17 [?] RSPM (R 4.4.0)\n P rstudioapi    0.16.0  2024-03-24 [?] RSPM (R 4.4.0)\n P sessioninfo   1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n P withr         3.0.1   2024-07-31 [?] RSPM (R 4.4.0)\n P xfun          0.47    2024-08-17 [?] RSPM (R 4.4.0)\n P yaml          2.3.10  2024-07-26 [?] RSPM (R 4.4.0)\n\n [1] /home/runner/work/code-publishing/code-publishing/renv/library/linux-ubuntu-jammy/R-4.4/x86_64-pc-linux-gnu\n [2] /home/runner/.cache/R/renv/sandbox/linux-ubuntu-jammy/R-4.4/x86_64-pc-linux-gnu/22bdb599\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "about.html#license-and-disclaimer",
    "href": "about.html#license-and-disclaimer",
    "title": "About",
    "section": "License and Disclaimer",
    "text": "License and Disclaimer\nWhere not indicated otherwise, the material in this tutorial is licensed under CC BY 4.0. None of the discussion in this tutorial constitutes legal advice.\nAny screenshots of RStudio are released under the GNU Affero General Public License v3.\nCopyright (C) 2024 Posit Software, PBC\n\nThis program is free software: you can redistribute it and/or modify it under the terms of version 3 of the GNU Affero General Public License as published by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;."
  },
  {
    "objectID": "about.html#funding",
    "href": "about.html#funding",
    "title": "About",
    "section": "Funding",
    "text": "Funding\n\n\n\nThis work was partly funded by the Berkeley Initiative for Transparency in the Social Sciences (BITSS), managed by the Center for Effective Global Action (CEGA)."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "In the following, we will provide a brief introduction to the concept of research compendia.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#the-importance-of-sharing",
    "href": "intro.html#the-importance-of-sharing",
    "title": "Introduction",
    "section": "The importance of sharing",
    "text": "The importance of sharing\nSuppose you are reading an article about a new imaging method to turn seismological data into subsurface images. The article describes the ideas that went into developing this method and presents a few examples to illustrate its superiority over previous approaches. You got interested and would like to apply this method to your own data. However, with only the article available, it could take months to come up with a working solution, if possible at all. This situation has been put aptly by Buckheit & Donoho (1995), distilling an idea by Jon Claerbout:\n\n“An article about computational science in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures.”\n\nEven for articles that are use computers to apply existing methods (rather than reporting on a new method), sharing the source code and being transparent about the computational environment is imperative to making research reproducible (Ince et al., 2012). By reproducibility, we mean “obtaining consistent results using the same input data; computational steps, methods, and code; and conditions of analysis” (National Academies of Sciences, Engineering, and Medicine, 2019, p. 46).",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#linking-results-and-computations",
    "href": "intro.html#linking-results-and-computations",
    "title": "Introduction",
    "section": "Linking results and computations",
    "text": "Linking results and computations\nThis tutorial not only covers sharing the source code, but also connecting it to the results through the creation of dynamic documents. Rather than manually copying numerical results, figures, or tables, they are inserted automatically upon rendering of the article. Dynamic documents bundled together with any necessary data and auxiliary software are called a research compendium (Gentleman & Temple Lang, 2007).\nThe practice to interleave narrative text with code has its roots in the paradigm of literate programming, where documentation and source code are treated as equals and are arranged in a way to maximize understanding (Knuth, 1984). Alternating text and code can be also found in notebook interfaces for exploratory programming, such as provided by Wolfram Mathematica or Jupyter Notebooks (Kluyver et al., 2016), with the added capability of executing the code and embedding its output. With Sweave (Leisch, 2002), ideas from both worlds – literate programming and embedding program output – were combined into one tool for rendering dynamic documents using the R programming language. It is the predecessor of the R package knitr (Xie, 2015) which is being used under the hood in this tutorial.1\nLinking results with their computations has benefits for authors and readers. For the author, articles always contain the most recent version of figures, as they are updated automatically when the computation changes. For the readers, it enables understanding exactly how a particular result was obtained if they get access to the underlying research compendium.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#best-practices",
    "href": "intro.html#best-practices",
    "title": "Introduction",
    "section": "Best practices",
    "text": "Best practices\nWhen creating the research compendium, there are a few things to consider (by Arguillas et al., 2022, licensed under CC BY 4.0):\n\nDoes the research compendium contain everything needed to reproduce a predefined outcome in an organized and parsimonious way?\n\nCompleteness: The research compendium contains all of the objects needed to reproduce a predefined outcome.\nOrganization: It is easy to understand and keep track of the various objects in the research compendium and their relationship over time.\nEconomy: Fewer extraneous objects in the compendium mean fewer things that can break and require less maintenance over time.\n\nIs descriptive information about the research compendium and its components available and easy to understand?\n\nTransparency: The research compendium provides full disclosure of the research process that produced the scientific claim.\nDocumentation: Information describing compendium objects is provided in enough detail to enable independent understanding and use of the compendium.\n\nIs information about how the research compendium and its components can be used available and easy to understand?\n\nAccess: It is clear who can use what, how, and under what conditions, with open access preferred.\nProvenance: The origin of the components of the research compendium and how each has changed over time is evident.\n\nIs information about the research compendium and its components embedded in code?\n\nMetadata: Information about the research compendium and its components is embedded in a standardized, machine-readable code.\nAutomation: As much as possible, the computational workflow is script- or workflow-based so that the workflow can be re-executed using minimal actions.\n\nIs there a plan for reviewing the research compendium for FAIR and computational reproducibility standards over time?\n\nReview: A series of managed activities are needed to ensure continued access to and functionality of the research compendium and its components for as long as necessary.\n\n\nAlthough this tutorial guides you through the creation of a research compendium, you are invited to revisit these questions after completion and check whether and how each point was addressed (or not). Further, you can consult them as a checklist for future projects.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSpecifically, Quarto employs knitr to execute chunks of R code.↩︎",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "make_readme.html",
    "href": "make_readme.html",
    "title": "Make a README",
    "section": "",
    "text": "Once you have prepared your project and settled on a license, it is time to add a final touch. Imagine returning to your project in five years, having forgotten most of the details of what you did exactly. What would be useful to know in order to quickly understand what is going on in the project? This is what needs to be described in the README. While you could just start writing along, most READMEs have some sections in common which we describe below.\n\nName\n\nHow is the project called?\n\nBadges/Project Status\n\nBadges typically report quick facts, like whether the project is actively maintained, how many dependencies it has, or whether it has been published in a package repository. Sometimes, the license, any associated DOIs, or quality metrics like code coverage by unit tests are communicated via badges as well.\n\nDescription\n\nWhat is the project about? What are its features? Why was it created?\n\nVisuals\n\nIs there anything you can show that demonstrates how the project can be used? Screenshots or other visuals can make the README more appealing.\n\nInstallation/Dependencies\n\nWhat steps need to be taken to run the project? What software needs to be installed? Mention all dependencies here that are not explicitly managed by renv, such as the system dependencies of R packages as well as the version of Quarto. An R package’s system dependency is any additional software that you need to install on your computer in order to use a particular R package. For example, the R package reticulate allows to run Python code from within R. However, in order to actually use it, one has to additionally install Python itself as it does not come together with reticulate – rather, it is a system dependency. See Section 2 for additional information.\n\nUsage\n\nWhich files does the project contain? How are they organized? How can one run the project – is there a master script or a particular order in which any scripts need to be executed? How long does it take to run all scripts? Is there additional documentation available?\n\nSupport\n\nDo you offer support or help, for example, via GitHub discussions or a mailing list?\n\nContributing\n\nIf the project is active: Can other people contribute? How? Do you accept contributions? Do you review issues? This section is sometimes outsourced into a file called CONTRIBUTING.md.\n\nAuthors\n\nWho was involved in creating this project? This involves you, your co-authors, and anybody you accepted contributions from.\n\nCitation\n\nIs there a recommended way to cite this project? Is there a published article associated with it that you would like to have cited? We recommend to increase citability by using the CodeMeta generator to create a file called codemeta.json. Alternatively, one can also use the R package codemetar to create this file. Then, put it into the project folder. Another common standard is the Citation File Format (CFF), which is an equally valid option.\n\nLicense\n\nUnder which licenses are the works in this project available?",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "make_readme.html#what-does-a-readme-contain",
    "href": "make_readme.html#what-does-a-readme-contain",
    "title": "Make a README",
    "section": "",
    "text": "Once you have prepared your project and settled on a license, it is time to add a final touch. Imagine returning to your project in five years, having forgotten most of the details of what you did exactly. What would be useful to know in order to quickly understand what is going on in the project? This is what needs to be described in the README. While you could just start writing along, most READMEs have some sections in common which we describe below.\n\nName\n\nHow is the project called?\n\nBadges/Project Status\n\nBadges typically report quick facts, like whether the project is actively maintained, how many dependencies it has, or whether it has been published in a package repository. Sometimes, the license, any associated DOIs, or quality metrics like code coverage by unit tests are communicated via badges as well.\n\nDescription\n\nWhat is the project about? What are its features? Why was it created?\n\nVisuals\n\nIs there anything you can show that demonstrates how the project can be used? Screenshots or other visuals can make the README more appealing.\n\nInstallation/Dependencies\n\nWhat steps need to be taken to run the project? What software needs to be installed? Mention all dependencies here that are not explicitly managed by renv, such as the system dependencies of R packages as well as the version of Quarto. An R package’s system dependency is any additional software that you need to install on your computer in order to use a particular R package. For example, the R package reticulate allows to run Python code from within R. However, in order to actually use it, one has to additionally install Python itself as it does not come together with reticulate – rather, it is a system dependency. See Section 2 for additional information.\n\nUsage\n\nWhich files does the project contain? How are they organized? How can one run the project – is there a master script or a particular order in which any scripts need to be executed? How long does it take to run all scripts? Is there additional documentation available?\n\nSupport\n\nDo you offer support or help, for example, via GitHub discussions or a mailing list?\n\nContributing\n\nIf the project is active: Can other people contribute? How? Do you accept contributions? Do you review issues? This section is sometimes outsourced into a file called CONTRIBUTING.md.\n\nAuthors\n\nWho was involved in creating this project? This involves you, your co-authors, and anybody you accepted contributions from.\n\nCitation\n\nIs there a recommended way to cite this project? Is there a published article associated with it that you would like to have cited? We recommend to increase citability by using the CodeMeta generator to create a file called codemeta.json. Alternatively, one can also use the R package codemetar to create this file. Then, put it into the project folder. Another common standard is the Citation File Format (CFF), which is an equally valid option.\n\nLicense\n\nUnder which licenses are the works in this project available?",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "make_readme.html#sec-dependencies",
    "href": "make_readme.html#sec-dependencies",
    "title": "Make a README",
    "section": "Installation/Dependencies",
    "text": "Installation/Dependencies\nAn overview over the system dependencies of R packages can be created using the function pak::pkg_sysreqs(). In combination with renv, we can obtain the system dependencies of all R packages in the current project:\n\n\nConsole\n\npak::pkg_sysreqs(renv::dependencies()$Package)\n\nThe output may look like the following:\n── Install scripts ─────────────────────── \ndnf install -y make pandoc\n\n── Packages and their system dependencies \nfs        – make\nknitr     – pandoc\nrmarkdown – pandoc\nsass      – make\nWe can see that make and pandoc were identified as system dependencies. One can obtain their version by running them with the --version argument:\n\n\nTerminal\n\nmake --version\npandoc --version\n\nWe also know that we need Quarto to create the PDF, so let’s find out its version as well:\n\n\nTerminal\n\nquarto --version\n\nIf you installed apaquarto or any other Quarto extension, one can query their versions as follows:1\n\n\nTerminal\n\nquarto list extensions\n\nFinally, we know that we installed a \\(\\TeX\\) distribution to create the PDF, so let’s find out its version by running:\n\n\nTerminal\n\nquarto check\n\nThe output is quite long and it might look slightly different for you, but the relevant sections are the following:\n[✓] Checking tools....................OK\n      TinyTeX: v2024.09\n      Chromium: (not installed)\n\n[✓] Checking LaTeX....................OK\n      Using: TinyTex\n      Path: /home/r155953/.TinyTeX/bin/x86_64-linux\n      Version: 2024",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "make_readme.html#create-it",
    "href": "make_readme.html#create-it",
    "title": "Make a README",
    "section": "Create It!",
    "text": "Create It!\nCreate your README now as the file README.md. If you feel stuck, you can have a look at the following examples:\n\n\n\n\n\n\nTip 1: Name\n\n\n\n\n\n\n\nREADME.md\n\n# Penguin Paper\n\n\n\n\n\n\n\n\n\n\nTip 2: Badges/Project Status\n\n\n\n\n\n\n\nREADME.md\n\n[![Project Status: Unsupported – The project has reached a stable, usable state but the author(s) have ceased all work on it. A new maintainer may be desired.](https://www.repostatus.org/badges/latest/unsupported.svg)](https://www.repostatus.org/#unsupported)\n\n\n\n\n\n\n\n\n\n\nTip 3: Description\n\n\n\n\n\n\n\nREADME.md\n\nThis project contains the Quarto manuscript of our study on penguins. It is written in R and uses `renv` to track its dependencies.\n\n\n\n\n\n\n\n\n\n\nTip 4: Installation/Dependencies\n\n\n\n\n\n\n\nREADME.md\n\n## Dependencies\n\nThis manuscript requires the following system software to be installed. In addition, we provide the version numbers this manuscript has last been run with:\n\n- [Quarto](https://quarto.org/docs/download/) 1.6.9\n- GNU Make 4.4.1\n- Pandoc 3.3\n- TinyTeX 2024.09\n- [R](https://cloud.r-project.org/) 4.4.1\n\nOn Fedora Linux, Make and Pandoc can be installed as follows:\n\n```bash\ndnf install -y make pandoc\n```\n\nQuarto and R can be installed using the links provided. TinyTeX can be installed using Quarto by entering the following into the terminal:\n\n```bash\nquarto install tinytex\n```\n\nAll R packages that this project requires are managed using [`renv`](https://cran.r-project.org/package=renv). Therefore, `renv` needs to be installed first, by entering the following in the R console:\n\n```r\ninstall.packages(\"renv\")\n```\n\nNext, one can open a new R session in the root directory of this project and run the following, which should install all required R packages at their recorded versions:\n\n```r\nrenv::restore()\n```\n\n\n\n\n\n\n\n\n\n\nTip 5: Usage\n\n\n\n\n\n\n\nREADME.md\n\n## Usage\n\nThe most important file in this project is `Manuscript.qmd` which contains the text of the article as well as the code for its computations. It is accompanied by the following files:\n\n- `Bibliography.bib`: bibliographic references used in the manuscript\n- `Data.csv`: a data set containing the simplified `palmerpenguins` data created using `write.csv(palmerpenguins::penguins, \"dat.csv\", row.names = FALSE)`\n- `data_dictionary.html`: a dictionary to the data file, created using `create_data_dictionary.R`\n\nThe folder `_extensions` contains the `apaquarto` extension which is used to typeset the PDF accoording to APA guidelines.\n\nThe manuscript can be rendered to PDF using the following command:\n\n```bash\nquarto render Manuscript.qmd\n```\n\n\n\n\n\n\n\n\n\n\nTip 6: Citation\n\n\n\n\n\n\n\nREADME.md\n\n## Citation\n\nPlease cite this draft as follows:\n\n&gt; Zerna & Scheffel (2024): \"A Study on Penguins: A Minimal Reproducible Example\". Unpublished manuscript.\n\n\n\n\n\n\n\n\n\n\nTip 7: License\n\n\n\n\n\n\n\nREADME.md\n\n## License\n\nThe manuscript file and the bibliograhpic references are made available by us under [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/). The data set by Kristen Gorman has been published under [CC0 1.0](https://creativecommons.org/publicdomain/zero/1.0/). `apaquarto` has also been published under [CC0 1.0](https://creativecommons.org/publicdomain/zero/1.0/). All other files in this project are available under [CC0 1.0](https://creativecommons.org/publicdomain/zero/1.0/).",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "make_readme.html#footnotes",
    "href": "make_readme.html#footnotes",
    "title": "Make a README",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLuckily, the extensions are included in the project folder, so technically their version is already recorded in the project’s files.↩︎",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "choose_license.html",
    "href": "choose_license.html",
    "title": "Choose a License",
    "section": "",
    "text": "Every expression of an idea, such as a literary or an artistic works, is automatically covered by copyright. Put simply, this means that nobody else than the copyright holder is allowed to copy, modify, or share it. Copyright licenses can grant others some of the necessary rights, but mostly don’t cover publicity, privacy, moral, patent, or trademark rights. Certain exceptions and limitations to copyright (such as fair use or the right to quote) may obviate the need for a license.\nResearchers are only allowed to share material they have the necessary rights to, for example, through a free/open license. These licenses often require to attribute the authors, indicate whether changes were made, and provide the text of the license, among other things. In addition, researchers should share any work by their own under such a license.\nChoosing a license involves:\n\nRecording the copyright notices and licenses for content by others (for example, in a file called LICENSE.txt) and following all their additional requirements.\nIn the simplest case, choosing two licenses (one suitable for code, one for everything else) which to apply simultaneously to all own content (for example, again by recording the license in the file LICENSE.txt). Recipients are then free to choose under which of the two licenses to use the material.\n\nWe recommend to choose CC0 1.0 and Apache 2.0 for all own works. Take your time to read the summaries behind the links and/or the actual license text to understand its legal effect.\nYou can adapt the following wording to your use case:\n\nExcept where noted otherwise, all files in this project are made available under CC0 1.0 or (at your option) under the terms of the Apache Software License 2.0.",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#tldr",
    "href": "choose_license.html#tldr",
    "title": "Choose a License",
    "section": "",
    "text": "Every expression of an idea, such as a literary or an artistic works, is automatically covered by copyright. Put simply, this means that nobody else than the copyright holder is allowed to copy, modify, or share it. Copyright licenses can grant others some of the necessary rights, but mostly don’t cover publicity, privacy, moral, patent, or trademark rights. Certain exceptions and limitations to copyright (such as fair use or the right to quote) may obviate the need for a license.\nResearchers are only allowed to share material they have the necessary rights to, for example, through a free/open license. These licenses often require to attribute the authors, indicate whether changes were made, and provide the text of the license, among other things. In addition, researchers should share any work by their own under such a license.\nChoosing a license involves:\n\nRecording the copyright notices and licenses for content by others (for example, in a file called LICENSE.txt) and following all their additional requirements.\nIn the simplest case, choosing two licenses (one suitable for code, one for everything else) which to apply simultaneously to all own content (for example, again by recording the license in the file LICENSE.txt). Recipients are then free to choose under which of the two licenses to use the material.\n\nWe recommend to choose CC0 1.0 and Apache 2.0 for all own works. Take your time to read the summaries behind the links and/or the actual license text to understand its legal effect.\nYou can adapt the following wording to your use case:\n\nExcept where noted otherwise, all files in this project are made available under CC0 1.0 or (at your option) under the terms of the Apache Software License 2.0.",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#a-primer-on-licenses",
    "href": "choose_license.html#a-primer-on-licenses",
    "title": "Choose a License",
    "section": "A Primer on Licenses",
    "text": "A Primer on Licenses\nWhenever you create a literary or artistic work (such as a text, image, video, or software), the copyright law in most countries limits other people from copying, modifying, and sharing it without your express permission.  This even applies if you make it available to others (e.g., on your website): First and foremost they are not allowed to copy, modify, or share it. This legal default of “all rights reserved” was created to benefit publishers, not authors (Fogel, 2006), and runs counter to many cultural and scientific processes. Copyright licenses enable authors to free up their works for reuse by others.If the work was created as part of your job, it might be your employer who holds the copyright to the work, depending on the country and contract.\n\n\nFor the purpose of this tutorial, by license we mean copyright license.\nA license is a legal document that regulates what others are allowed to do with a copyright-protected work – the licenses we discuss do not limit the author or copyright holder in their rights. And while you could write your own, there are already many pre-formulated licenses available to choose from and to apply to your work.1\n\n\n\n\n\n\nCaution 1: Giving Publishers Exclusive Rights\n\n\n\nWhen you have your article published under a Creative Commons license, some publishers still demand an exclusive publishing and distribution license or a copyright assignment. This would give them more rights than the readers of the article have through the chosen Creative Commons license (Rumsey & Labastida, 2022) and exceeds by far what is necessary to make publication possible (Suber, 2022). Consequently, authors should oppose this practice and grant publishers the same rights that every other reader of the article has. If your chosen publisher insists on an exclusive license, you may at least retain the copyright for your figures – follow the guide “Retaining copyright for figures in academic publications to allow easy citation and reuse” by Elson (2016) to learn how to do that.\nIf you have published a closed-access paper before, you can consult ShareYourPaper for legal options to still make it available free of charge to readers.\n\n\nThe licenses we discuss here mostly regard copyright. Therefore, recipients may lack other rights such as publicity, privacy, moral, patent,2 or trademark rights. For example, sharing photos that depict people is not only a matter of copyright, but also of privacy rights. Conversely, the licenses do not apply if recipients are allowed to use the works for other reasons such as fair use, the right to quote, or because they made a different arrangement with the author.",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#which-license-to-choose-for-a-work",
    "href": "choose_license.html#which-license-to-choose-for-a-work",
    "title": "Choose a License",
    "section": "Which License to Choose for a Work?",
    "text": "Which License to Choose for a Work?\nMany boilerplate licenses are available to apply to your work. Which license is appropriate depends on several factors, including existing licenses in place and the type of work, but also your personal considerations. We strongly recommend to apply a free/open license to your work, which means that the work “can be freely studied, applied, copied and/or modified, by anyone, for any purpose” (Möller et al., 2015). Importantly, this also means that others do not need to ask or notify the author and that they can use it for commercial purposes. By the choice of license, authors can, however, demand that they are credited, that the original license is indicated, that modifications are indicated, that derivative works are only shared under the same license, and that no further restrictions are imposed on the work. Software licenses may additionally require to make the source code available to everybody the software is shared with and often require to display the full text of the license upon usage. Because there are many free/open licenses available, the licenses discussed here only represent a recommended subset.\n\n\nIf you would like to choose a license not listed here, it should be appropriate for the type of work in question and be compatible with the dominant copyleft license in the respective community (see also Note 3). For software that’s almost universally the (A)GPLv3 and for writing, image, audio, and video that’s mostly the CC BY-SA 4.0. For data, no dominant copyleft license has emerged yet, so any of ODbL 1.0, CDLA Sharing 1.0, and CC BY-SA 4.0 are acceptable.\n\n\n\n\n\n\nNote 1: A Note on Terminology\n\n\n\n\n\nThe terms free and open, especially with regard to software, come with a history. The Free Software Foundation (FSF) was founded in 1985 to protect “four essential freedoms” (2021) of a program’s user. These are the freedoms to use, study, share, and improve a program. Software whose users legally and practically have these freedoms (because, among other things, they have access to its source code) is considered free. The four freedoms are seen as vital for a society as a whole in the sense that they enable sharing, cooperation and ultimately freedom in general. The FSF maintains a list of software licenses that it considers to be protecting the four freedoms. Sometimes the term libre (Spanish and French for free) is used to make a distinction from gratis software. You can learn more about free software at Write Free Software.\nThe Open Source Initiative (OSI), which was founded in 1998, follows a more pragmatic approach. It is concerned with developing high-quality software, for which everyone’s ability to obtain, modify and contribute back the source code is considered beneficial. Access to the source code is one out of multiple conditions for software to be considered open source by the OSI (2007), which equally maintains a list of approved licenses.\nAccess to the source code is a necessary, but not sufficient requirement both for free software and for open source software. Conversely, both can (and frequently are) sold for money, as their respective criteria only apply once one has access to the software. Throughout this tutorial, we write “free/open license” to mean a license that is approved by either the FSF or the OSI. Software which is neither but makes available its source code is sometimes referred to as source-available software.\nApart from software, the term open access has often been used for works that are available at no cost. For example, this is the commonality of bronze, green, hybrid, gold, and diamond/platinum open access articles, which otherwise vary in the rights that are granted to readers. In 2002, the Budapest Open Access Initiative declared that open access additionally includes the right to use articles for any purpose, and in 2003, the Bethesda Statement and the Berlin Declaration added the right to make derivative works.\nTwo other notable definitions include the Open Definition (Open Knowledge Foundation, 2016), which was first drafted in 2005, and the definition of Free Cultural Works (Möller et al., 2015), for which the open editing phase began in 2006. They are largely viewed as compatible with one another.\n\n\n\n\n\n\n\nExisting License?\nFirst, if you adapt (i.e., modify, build on) a work by others you need to determine if it is provided to you under a free/open license. If yes, we recommend you to make your contribution available under the same license.3 For example, if you adapt code published in another paper, choose the same license for your modifications. The same applies if there are strong community norms to use a particular free/open license.4 Importantly, as discussed before, you are generally not allowed to adapt a work not published under a free/open license.You can determine whether a license is free/open by searching for its name in the SPDX License List and looking for at least one Y in the two columns FSF Free/Libre? and OSI Approved?\n\n\nWork Type?\nIf you create a new work and no strong community norms suggest a particular license, you need to choose the license yourself. Which license to choose depends on the type of work you create. Software licenses, for example, may consider that the source code is the preferred form for making modifications, while licenses for data can differentiate between the database and any works produced from it. We have created a flowchart that covers the most likely types of works you will create as a researcher: software, writing (i.e., text), images, audio, video, and data (see Figure 1). This flowchart always recommends the most permissive license possible to maximize reuse – though we provide two additional flowcharts below that allow for more choices. Click on the name of a license to learn more about it.\n\n\n\n\n\n\nTip 1: Multi-licensing\n\n\n\nSometimes, the type of a work is not obvious. For example, a Quarto document…\n\n…contains both R code and writing, and\n…may be distributed in the source format or as rendered document, possibly including images.\n\nOne may wonder which license to apply in this case, because Creative Commons licenses are not recommended for source code5 and applying software licenses to PDFs or images can lead to confusion or nuisance.6\nOne solution is to make such a work simultaneously available under two (or more) licenses, at the choice of the recipient: Either under a specified software license, or under a Creative Commons license7. This is called multi-licensing and makes it easier to reuse both the rendered document as well as the code. For example, one could write:\n\nThe Quarto files in this project are made available under CC0 1.0 or (at your option) under the terms of the Apache Software License 2.0.\n\n\n\nNote, that for data there is, at least in principle, the possibility that a different license applies to the individual entries than to the collective database. For example, if you were to create a database of artworks by others, those artworks would be licensed individually as chosen by the artists, but the license for the database as a whole could be chosen by you. The latter includes the selection of entries, field names and any sui generis database rights. However, if the content was created by you, we recommend you to choose the same license for both content and database. Factual data (like measurements or metadata) should be licensed under CC0 1.0 – otherwise, consult Note 2 for some caveats.\n\n\n\n\n\n\n\n\nflowchart TB\n  start(\"We want&lt;br&gt;to choose&lt;br&gt;a license.\") --\"We adapted a work by&lt;br&gt;others shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license[\"&lt;em&gt;Use its license&lt;/em&gt;\"]\n  start --\"We created the work&lt;br&gt;entirely by ourselves.\"--&gt; norm(\"Community norm&lt;br&gt;regarding license?\")\n  \n  norm --\"Exists\"--&gt; follow_existing_norms[\"&lt;em&gt;Follow that norm&lt;/em&gt;\"]\n  norm --\"Does not&lt;br&gt;exist\"--&gt; type(\"Work type?\")\n  \n  type --\"Software\"--&gt; apache[\"Apache 2.0\"]\n  type --\"Writing, image, audio, video\"--&gt; cc0[\"CC0 1.0\"]\n  type --\"Data(base)\"--&gt; existing_license_data(\"Adapting individual&lt;br&gt;data entries by others?\")\n  \n  existing_license_data --\"No, we created them&lt;br&gt;entirely by ourselves.\"--&gt; cc0_data[\"CC0 1.0 &lt;em&gt;for database&lt;br&gt;and its content&lt;/em&gt;\"]\n  existing_license_data --\"Yes, they were&lt;br&gt;shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license_data[\"&lt;em&gt;Use their license&lt;br&gt;for content and&lt;/em&gt;&lt;br&gt;CC0 1.0 &lt;em&gt;for&lt;br&gt;the database&lt;/em&gt;\"]\n  \n  click apache href \"https://choosealicense.com/licenses/apache-2.0/\"\n  click cc0 href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  click cc0_data href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n\n\n\n\n\n\n\n\nFigure 1: Flowchart for Choosing a License\n\n\n\n\n\n\n\n\n\nNote 2: Other Work Types\n\n\n\n\n\nOne should be cautious about the restrictions of licenses applied to the following types of works:\n\nfonts: Copyleft licenses applied to fonts can be a special case: If a font is put under the license CC BY-SA 4.0, any documents containing texts using that font will probably be derivative works and have to be put under the same license if shared. If the intent is that only derived fonts, if published, have to be put under the same license, the SIL Open Font License 1.1 is an appropriate choice. Note, however, that it doesn’t require attribution for usage. If no copyleft mechanism is intended, CC0 1.0 also works for fonts.\ntemplates and LaTeX packages: If a template or, for this purpose, a LaTeX package, is licensed under a copyleft software license such as the AGPLv3, every work that is a derivative of the template or that uses the LaTeX package has to put under the same license, if shared (Koppor, 2016). And if a document contained source code covered by the GPLv3, the same license would also apply to the document (MadHatter, 2022).\ndatabase content: If the work produced from a database (the “output”) is a derivative of the content in the database, the output is subject to the restrictions laid out in the license. For example, if geospatial data were to be licensed under CC BY 4.0, all maps produced from the data would likely need to fulfill this license’s obligation for unrestricted access (its Anti-DRM provision) if shared (see Poole, 2017). Similarly, following an example from Matt (2009), if one were to choose the copyleft license CC BY-SA 4.0 for this purpose, any map that is a derivative of the data would also need to licensed under CC BY-SA 4.0 (or a compatible license) if shared. If the intention is to only have derivative databases under the same license, one might want to choose the ODbL 1.0 for the database, as it was specifically designed not to apply to works produced from the data in the database. Otherwise CC0 1.0 is an excellent choice for data.\nworks in the public domain: If a work is already in the public domain, it should be marked using the PDM 1.0, rather than applying a waiver such as the CC0 1.0 (or even another license).\n\n\n\n\n\n\nCopyleft?\nThe consequence of applying a permissive license to your work is that others may distribute their adaptations from it under stricter terms, possibly without a free/open license. You may prefer that everybody who receives somebody else’s adaptations of your work enjoys the same rights that you granted to them. This can be achieved by copyleft licenses.8 For software, they come in two flavors:\n\nWeak copyleft licenses only require that modifications to the software itself are licensed under the same or a compatible license if shared. For example, if you create and publish software under a weak copyleft license, others who modify it and put their version on the internet have to apply the same license. However, people who merely use your software in their own work which they make publicly available can choose any license for it.\nStrong copyleft licenses, on the other side, insist that any larger works that use the copyleft-licensed software must also be licensed under the same or a compatible license if shared. For example, if your software were to be put under a strong copyleft license, everybody publishing software that uses your software would need to put it under the same license. Because of only few rulings in courts, the extent of this requirement is disputed (Wikipedia contributors, 2024).\n\nNote, however, that the copyleft licenses we discuss here do not mandate sharing. Copyleft (and attribution) clauses are only triggered if the work is shared (Creative Commons, 2015). This means that if you only use a work internally, you do not need to share your derivative works. It is also worth reiterating that these licenses do not restrict the original author(s): They are still permitted to distribute their work under a different license and without sharing the source code.\n\n\n\n\n\n\nTip 2: Projects Involving R Code\n\n\n\nIn most cases, the output of software, like images or tables, does not depend on the software’s license. Therefore, if you use an R package under a copyleft license to create a figure, you are likely the copyright owner. However, if the output is based on data, it can be considered a derivative work and the license of the data also applies. For example, maps may be considered as a derivative of the geographic data they are based on.\nIt is disputed whether software that uses an R package under AGPLv3 or GPLv39 can only be published under a GPL-compatible license – or even has to be published under the same license. Posit, the company behind RStudio, does not believe that to be the case (see also Wickham & Bryan, 2023).\nYou can learn which license an installed package uses via packageDescription(\"&lt;PACKAGE_NAME&gt;\", fields = \"License\"). And to identify which licenses are being used by the R packages your project depends on, you can use the following code:\ndeps &lt;- renv::dependencies()$Package |&gt;\n  unique() |&gt;\n  pak::pkg_deps(dependencies = NA) |&gt;\n  getElement(\"package\")\nunique(installed.packages(fields=\"License\")[deps, \"License\"])\n\n\nWe have prepared two advanced license flowcharts, one for software, writing, images, audio, and video in Figure 2 and one for data in Figure 3 where you can make additional choices. Note, however, that especially the advanced flowchart for licensing data is quite complex and we recommend you to seek legal counsel if you want to be sure.\n\n\nAttribution, State Changes, and Anti-DRM?\nThe advanced license flowcharts also allow you to make additional decisions:\n\nAttribution means whether recipients of your work are required to provide attribution to you. For software licenses, this is called a copyright notice. Note that even if attribution is not a requirement of the license, good scientific practice demands that appropriate citations are made.\nState changes means that recipients need to indicate if changes were made.\nAnti-DRM means that when others share your work they are not allowed to apply technological measures restricting anything that the license permits. DRM is an abbreviation for digital rights management.\n\nFrom the Creative Commons licenses, only CC0 1.0 does not require providing attribution. All software licenses in Figure 2 require providing attribution, although only Apache 2.0 and AGPLv3 require others to indicate changes. For data, the ODbL 1.0 allows for technological measures that restrict the work only if a version of the database is provided in parallel without such measures.\n\n\n\n\n\n\nNote 3: Other Restrictions\n\n\n\n\n\nAs indicated before, a free/open license must allow creating derivative works and must allow exercising the rights granted by it for any purpose, including commercial use. There are a few good resources on the reasoning behind that (e.g., see Klimpel, 2013; Möller, 2023; Open Data Institute, 2015; Stallman, 2022b), but we would like to highlight one reason in particular.\nWith the rights provided by free/open licenses comes the possibility to build on and combine multiple works by different authors, which is essential for any cultural and scientific activity. However, this is only possible if the various licenses involved are compatible with each other. For example, one is allowed to remix two figures if the first is licensed under CC BY 4.0 and the second under CC BY-SA 4.0 because the licenses were written to be compatible with each other (compare Creative Commons, 2024b). Also note that CC BY-SA 4.0 is one-way compatible with the GPLv3, which in turn is compatible with the AGPLv3.\nHowever, applying a restriction such as only permitting non-commercial use or not allowing derivative works creates silos of works which are mutually incompatible with each other. Put differently, one cannot share a remix of two works where one is licensed under CC BY-SA 4.0 and the other only allows non-commercial use. In order to avoid silos, one should only choose license which are compatible with the dominant copyleft license in the respective community (Lämmerhirt, 2017; Wheeler, 2014). If you would like to learn more about the different types of compatibility, we recommend you to read the article “A Quick Guide to Software Licensing for the Scientist-Programmer” by Morin et al. (2012). The following diagram provides an overview of the compatibility of various licenses:\n\n\n\n“Open data-capable license interoperability” by Robbie Morrison licensed under CC BY 4.0. Taken without modification from Morrison (2024)",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#which-licenses-to-choose-for-a-project",
    "href": "choose_license.html#which-licenses-to-choose-for-a-project",
    "title": "Choose a License",
    "section": "Which Licenses to Choose for a Project?",
    "text": "Which Licenses to Choose for a Project?\nSo far, we only discussed how to choose a license for works of one type. But what if you want to share a project with all kinds of files? For example, the project from this tutorial (among other things) includes a data file, a manuscript file with intermingled code and writing, and an R file. And what if you also want to share files by others, as is the case with apaquarto which you may have installed in this project?\nThe answer is that you need to indicate the license on a per-file or per-folder basis (rather than choosing one for the whole project). Sometimes, even different parts of a file might be subject to different licenses. The easiest approach is to make note of every foreign work included in your project and record its license. Then, multi-license all the remaining files, which are yours, under a code and a non-code license in parallel as explained in Tip 2.",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#applying-the-license",
    "href": "choose_license.html#applying-the-license",
    "title": "Choose a License",
    "section": "Applying the License",
    "text": "Applying the License\nHaving selected the licenses of your choice – again, you might need multiple ones depending on the types of works your project contains –, we encourage you to read through the full license text (or at least a legal summary) to understand their effect. Then, you can record the license of existing content and apply the licenses of your own contributions. Mostly, this just means indicating which license applies to which file or folder, usually in the project’s README (among other places), whose creation will be discussed later.\n\n\n\n\n\n\nCaution 2: License Versions Are Important\n\n\n\nYou may have noticed that we mostly refer to licenses using a name and a version number. This is because the organizations that created the licenses sometimes publish updated versions to accommodate for developments in copyright law and the communities that use the licenses. For example, the Creative Commons licenses (that start with CC) were first published in 2002. Since then, the possibility to relicense under compatible licenses has been added (v3.0), a 30-day window to correct license violations has been established to combat copyleft trolls, and sui generis database rights are covered explicitly (v4.0). There are many more subtle differences between license versions, therefore it is important to indicate which license version exactly one is referring to, as the license of a work does not “update” automatically.\nFor the AGPLv3 it is even recommended to state whether a work is licensed under exactly the indicated version of the license or, alternatively, also under newer versions of the license (Stallman, 2022a).\n\n\nFor example, the apaquarto extension that you included in your project is a work by others.10 You need to indicate its license so that others know what they are allowed to do – and, of course, you need to comply with any terms yourself, such as retaining the copyright notice.11 In contrast, if it were not for this tutorial, the manuscript would contain your own work and you would need to indicate under which license you provide it to others.\n\n\n\n\n\n\nTip 3: Follow the Help Provided by the License Authors\n\n\n\nFor all the licenses recommended in this tutorial, the organizations that created these licenses provide more information on how to apply them to your work:\n\n\n\n\n\n\n\nApache 2.0\nMPL 2.0\nAGPLv3\n\n\n\n\nCC licenses\nODbL 1.0\n\n\n\n\nCreative Commons even provides a range of considerations for licensors and licensees (Creative Commons, 2013) and an interactive chooser which you can use to create text snippet that you can copy and paste to the desired location.\n\n\nWhile it is common to state the chosen license(s) in the README, usually one of the following actions is taken in addition:\nIn the simplest case, one just creates a file called LICENSE.txt where the full text of the license is copied verbatim. This is a practice propagated by GitHub, which provides instructions for and comparisons of many licenses via ChooseALicense.com. However, if the project is not completely covered by one single license, this practice may become unwieldy. For example, if a project contains different types of works by different authors, the LICENSE.txt needs to detail which file is covered by which license(s), along with any copyright notices.\nIndividual programming languages also have their own way of stating which license a package is distributed under. For R packages, this is usually set by the field License in the file DESCRIPTION (Wickham & Bryan, 2023).\nFinally, Note 4 explains how to use the REUSE specification to make the choice of license machine-readable. This is the approach we recommend taking.\n\n\n\n\n\n\nNote 4: Using REUSE to Record Licenses\n\n\n\n\n\nEvery major free/open license has a unique SPDX identifier which allows communicating the license choice unequivocally. We will be using that to indicate the license for every file in your project, along with the year of publication and the copyright holder. To do this, we add a comment to the beginning of every file and include the two tags SPDX-FileCopyrightText and SPDX-License-Identifier. How this works depends on the file type, as the syntax for a comment varies.\nFor example, if you previously created the file create_data_dictionary.R, you can now add the following comment to the beginning of the file, replacing &lt;YEAR&gt; and &lt;NAME&gt; with the current year and your name – of course, you can also choose a different license:\n\n\ncreate_data_dictionary.R\n\n# SPDX-FileCopyrightText: &lt;YEAR&gt; &lt;NAME&gt;\n#\n# SPDX-License-Identifier: CC0-1.0\n\nYou need to use # to start the comment because this is the symbol that starts comment lines in R scripts. Alternatively, you can use the reuse tool to add these information for you. After installing it with…\n\n\nTerminal\n\npipx install reuse\n\n…you can add the copyright information using the following command – the current year will be added automatically:\n\n\nTerminal\n\nreuse annotate --copyright=\"&lt;NAME&gt;\" --license=\"CC0-1.0\" create_data_dictionary.R\n\nIn many cases, the reuse tool will figure out the appropriate comment style for you. If this is not the case, as currently with Quarto files, you can tell it directly which comment style to use (html in this case):\n\n\nTerminal\n\nreuse annotate --copyright=\"Josephine Zerna &lt;josephine.zerna@tu-dresden.de&gt;\" --copyright=\"Christoph Scheffel &lt;christoph_scheffel@tu-dresden.de&gt;\" --copyright=\"Florian Kohrt\" --license=\"CC-BY-4.0\" --style=html Manuscript.qmd\n\nThis adds the following header to Manuscript.qmd:\n\n\nManuscript.qmd\n\n&lt;!--\nSPDX-FileCopyrightText: 2024 Christoph Scheffel &lt;christoph_scheffel@tu-dresden.de&gt;\nSPDX-FileCopyrightText: 2024 Florian Kohrt\nSPDX-FileCopyrightText: 2024 Josephine Zerna &lt;josephine.zerna@tu-dresden.de&gt;\n\nSPDX-License-Identifier: CC-BY-4.0\n--&gt;\n\nNote that Manuscript.qmd was provided to you under CC BY 4.0, which is what you indicate with the previous comment. If you edited the file, you may also add yourself.12\nSometimes, there are file types which do not allow for adding the license information inside them, such as PDF and CSV files. For these, a corresponding .license file can be created. Try the following command which indicates that the data were published under CC0 1.0:\n\n\nTerminal\n\nreuse annotate --copyright=\"Kristen Gorman\" --license=\"CC0-1.0\" Data.csv\n\nYou will notice that this creates another file called Data.csv.license containing the relevant information:\n\n\nData.csv.license\n\nSPDX-FileCopyrightText: 2024 Kristen Gorman\n\nSPDX-License-Identifier: CC0-1.0\n\nIf you want to indicate the license for all files in a particular folder, you can create a file called REUSE.toml and add an [[annotations]] table for them:\n\n\nREUSE.toml\n\nversion = 1\n\n# apaquarto extension from https://github.com/wjschne/apaquarto\n[[annotations]]\npath = \"_extensions/wjschne/apaquarto/*\"\nSPDX-FileCopyrightText = \"2024 William Joel Schneider &lt;w.joel.schneider@gmail.com&gt;\"\nSPDX-License-Identifier = \"CC0-1.0\"\n\nFinally, there may be some minor files which are build artifacts. You can either add them to your .gitignore file or use the CC0 1.0 license/waiver with a copyright tag such as SPDX-FileCopyrightText: NONE to assert that there is no copyright holder. For more information, also discussing other corner cases, you can read their Frequently Asked Questions.\nOnce you are done, you can download the texts of all indicated licenses using…\n\n\nTerminal\n\nreuse download --all\n\n…and verify that you did not miss a file by running…\n\n\nTerminal\n\nreuse lint\n\n\n\n\nRegardless of how exactly the licenses are added to the project, this is a good opportunity to verify one last time that all third party content is provided to you under a free/open license and that you comply with it. Please add a license to your project now, either creating a file LICENSE.txt or following the REUSE standard.",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#wrap-up",
    "href": "choose_license.html#wrap-up",
    "title": "Choose a License",
    "section": "Wrap-up",
    "text": "Wrap-up\nIf you would like to learn more about copyright and licenses you might find the following resources interesting:\n\n“Open Content – A Practical Guide to Using Creative Commons Licences” by Kreutzer & Deutsche UNESCO-Kommission (2014)\n“Creative Commons Certificate for Educators, Academic Librarians, and Open Culture” by Creative Commons (2024a)\n“Freie Software – Zwischen Privat- und Gemeineigentum” by Grassmuck (2004)",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#additional-figures",
    "href": "choose_license.html#additional-figures",
    "title": "Choose a License",
    "section": "Additional Figures",
    "text": "Additional Figures\n\n\n\n\n\n\n\n\n\nflowchart TB\n  start(\"We want to choose a&lt;br&gt;license for software,&lt;br&gt;writing, image, audio,&lt;br&gt;or video.\") --\"We adapted a work by&lt;br&gt;others shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license[\"&lt;em&gt;Use its license&lt;/em&gt;\"]\n  start --\"We created the work&lt;br&gt;entirely by ourselves.\"--&gt; norm(\"Community norm&lt;br&gt;regarding license?\")\n  \n  norm --\"Exists\"--&gt; follow_existing_norms[\"&lt;em&gt;Follow that norm&lt;/em&gt;\"]\n  norm --\"Does not&lt;br&gt;exist\"--&gt; type(\"Work type?\")\n  \n  type --\"Software\"--&gt; code_sa(\"Attribution?&lt;br&gt;State changes?&lt;br&gt;Copyleft?\")\n  type --\"Writing, image, audio, video\"--&gt; nocode_cc(\"Attribution?&lt;br&gt;State changes?&lt;br&gt;Anti-DRM?&lt;br&gt;Copyleft?\")\n  \n  code_sa --\"Attribution &&lt;br&gt;State changes\"--&gt; apache[\"Apache 2.0\"]\n  code_sa --\"Attribution &&lt;br&gt;Weak copyleft\"--&gt; mpl[\"MPL 2.0\"]\n  code_sa --\"Attribution &&lt;br&gt;State changes &&lt;br&gt;Strong copyleft\"--&gt; agpl[\"AGPLv3\"]\n  \n  nocode_cc --\"Neither\"--&gt; cc0[\"CC0 1.0\"]\n  nocode_cc --\"Attribution &&lt;br&gt;State changes &&lt;br&gt;Anti-DRM\"--&gt; cc_by[\"CC BY 4.0\"]\n  nocode_cc --\"Attribution &&lt;br&gt;State changes &&lt;br&gt;Anti-DRM &&lt;br&gt;Copyleft\"--&gt; cc_by_sa[\"CC BY-SA 4.0\"]\n  \n  click apache href \"https://choosealicense.com/licenses/apache-2.0/\"\n  click mpl href \"https://choosealicense.com/licenses/mpl-2.0/\"\n  click agpl href \"https://choosealicense.com/licenses/agpl-3.0/\"\n  click cc0 href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  click cc_by href \"https://creativecommons.org/licenses/by/4.0/\"\n  click cc_by_sa href \"https://creativecommons.org/licenses/by-sa/4.0/\"\n\n\n\n\n\n\nNote. DRM = digital rights management\n\n\nFigure 2: Advanced License Flowchart for Software, Writing, Images, Audio, and Video\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n  start(\"We want to choose a&lt;br&gt;license for data.\") --\"We adapted a database by&lt;br&gt;others shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license_db[\"&lt;em&gt;Use its license(s)&lt;br&gt;for content and database&lt;/em&gt;\"]\n  start --\"We created a database&lt;br&gt;entirely by ourselves.\"--&gt; norm(\"Community norm&lt;br&gt;regarding license?\")\n  \n  norm --\"Exists\"--&gt; follow_existing_norms[\"&lt;em&gt;Follow that norm&lt;/em&gt;\"]\n  norm --\"Does not&lt;br&gt;exist\"--&gt; existing_license_content(\"Adapting content&lt;br&gt; by others?\")\n  \n  subgraph \"License for individual data entries (content)\"\n  existing_license_content --\"No, we created the content&lt;br&gt;entirely by ourselves.\"--&gt; metadata(\"Entries are facts&lt;br&gt;(like measurements&lt;br&gt;or metadata)?\")\n  existing_license_content --\"Yes, it was&lt;br&gt;shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license_content[\"&lt;em&gt;Use that license&lt;/em&gt;\"]\n  metadata --\"Yes\"--&gt; cc0_content_metadata[\"CC0 1.0\"]\n  metadata --\"No\"--&gt; choose_license[\"&lt;em&gt;Consult flowchart for&lt;br&gt;software, writing,&lt;br&gt;image, audio, and video&lt;/em&gt;\"]\n  end\n  \n  subgraph \"License for combination of data (database)\"\n  choose_license --&gt; switch_license[\"&lt;em&gt;Depending on content license&lt;/em&gt;\"]\n  use_existing_license_content --&gt; switch_license\n  \n  cc0_content_metadata --&gt; cc0_db[\"CC0 1.0\"]\n  switch_license --\"CC0 or&lt;br&gt;non-CC license\"--&gt; sa(\"Attribution?&lt;br&gt;Anti-DRM?&lt;br&gt;Copyleft?\")\n  switch_license --\"CC BY or&lt;br&gt;CC BY-SA\"--&gt; same[\"&lt;em&gt;Same license for DB&lt;/em&gt;\"]\n  \n  sa --\"Neither\"--&gt; cc0_db\n  sa --\"Attribution &&lt;br&gt;Anti-DRM &&lt;br&gt;Copyleft\"--&gt; odbl[\"ODbL 1.0\"]\n  \n  %% the following link is only added to have terminal nodes on the same level\n  sa ~~~ same\n  end\n  \n  click cc0_content_metadata href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  click cc0_db href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  click odbl href \"https://opendatacommons.org/licenses/odbl/summary/\"\n\n\n\n\n\n\n\n\nFigure 3: Advanced License Flowchart for Data(base)",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#footnotes",
    "href": "choose_license.html#footnotes",
    "title": "Choose a License",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn fact, you should not create your own license if the purpose is to share your work freely and openly with others. By using a boilerplate license others know what to expect, also because they have been tested in courts.↩︎\nIn fact, the software licenses we recommend on this page have been specifically selected to provide an express grant of patent rights.↩︎\nCopyleft licenses even require you to choose the same or a compatible license.↩︎\nOf course, this is only a heuristic and there might be good reasons to deviate from community norms.↩︎\nbecause (among other reasons) they explicitly disclaim any conveyance of patent rights↩︎\nbecause they often require to display the full text of the license↩︎\nthat is, a license for writing, image, audio, and video↩︎\nSo called because copyleft licenses make content permanently free, thus turning copyright around: © → 🄯. In the realm of Creative Commons licenses, copyleft is also called share alike.↩︎\na variant of the AGPLv3 that does not cover software running as a service↩︎\nUnless you are the author of the apaquarto extension.↩︎\nIn this particular case, apaquarto is licensed under CC0 1.0, which does not require you to retain a copyright notice. In fact, it’s an extremely permissive license.↩︎\nFor licenses that require that modifications are indicated, this is an easy way to comply with them, although you do not need to provide your real name.↩︎",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code Publishing Tutorial",
    "section": "",
    "text": "This tutorial covers how to make your code available to others. It wraps up a series of tutorials which we recommend to go through in advance:\n\nIntroduction to version control with git and GitHub within RStudio: This tutorial explains how to set up a simple project with version control.\nCollaborative coding with GitHub and RStudio: Here you can learn how to collaborate with others on code projects using GitHub.\nIntroduction to R: This is an introduction to the R programming language.\nIntroduction to renv: Here you can learn how to manage the dependencies of an R project.\nIntroduction to Quarto: Learn how to combine prose and code to make documents more reproducible.\nIntroduction to Zotero: Get introduced to the reference management software Zotero.\nFAIR research data management: Learn how to make your data findable, accessible, interoperable, and reusable.\n\nWhile the general principles taught in this tutorial apply to most researchers publishing code, we will make very specific suggestions what tools to use.\nIn particular, we will assume you have installed Git, R, RStudio, and Quarto. Windows users may additionally need RTools.\n\n\n\n\n\n\nNote 1: Alternatives to Quarto\n\n\n\n\n\nQuarto is a tool to create reproducible documents, but not the only one. You may also use RMarkdown, Jupyter Book, Stencila, Curvenote, showyourwork!, Org Mode, StatTag, or one of the countless others.\n\n\n\nWe will start with creating a simple report which incorporates R code. Then, we will focus on what is required to publish your work:\n\nremoving legal barriers: adding an appropriate license\nhigh-level documentation: creating a README file\narchival: uploading it to a repository\n\nGet started\n\n\n\n Back to top"
  }
]